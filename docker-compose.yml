version: '3.7'

services:
  instagram-backend:
    container_name: instagram-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file: 
      - ./backend/.env
    volumes:
      - ./backend/:/instagram-clone
    ports:
      - 8088:8088
    depends_on:
      - instagram-db
    restart: always
    networks:
      - postgres

  instagram-frontend:
    container_name: instagram-frontend
    build:
      context: ./front-end
      dockerfile: Dockerfile
    volumes:
      - ./front-end/:/front-end
    ports:
      - 3000:3000
    restart: always
    networks:
      - postgres

  instagram-db:
    container_name: instagram-db
    image: postgres:latest
    env_file: 
      - ./backend/.env
    volumes:
      - ./backend/database-data/:/var/lib/postgresql/data/ # persist data even if container shuts down
    ports:
      - 5432:5432
    restart: always
    expose:
      - 5432
    networks:
      - postgres

  adminer:
    container_name: 'adminer-postgres'
    image: adminer
    env_file: 
      - ./backend/.env
    ports:
      - 8080:8080
    environment:
      ADMINER_DEFAULT_SERVER: instagram-db
      ADMINER_DESIGN: 'lucas-sandery' # theme
    restart: always
    depends_on:
      - instagram-db
    networks:
      - postgres
networks:
  postgres:
    driver: bridge

volumes:
  database-data: # named volumes can be managed easier using docker-compose
